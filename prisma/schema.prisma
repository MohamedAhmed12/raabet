// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  fullname        String  @unique
  email           String  @unique
  password        String
  avatar          String @default("/images/user-placeholder.png")
  createdAt DateTime @default(now()) @db.Timestamp(3) // Database-specific type
  links           Link[]
  is_confirmed    Boolean  @default(false)
  activationCodes ActivationCode[] // One-to-many relationship
  passwordResetToken PasswordResetToken?
  resetToken        String?  @unique
  resetTokenExpires DateTime?
}

model ActivationCode {
  id        String   @id @default(uuid())
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) // Add this line
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Allows multiple activation codes per user
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id                               String  @id @default(uuid())
  phone        String
  website      String
  instagram    String
  twitter      String
  bio          String

  // Relationship 
  blocks                           Block[]  // One-to-many relationship with Block
  socials                          Social[]  // One-to-many relationship with social
  userName     String
  userId       String
  user         User   @relation(fields: [userId], references: [id]) // Reference `id` in User
 
  // Styling and design fields
  general_styles_desktop_bgcolor   String
  general_styles_primary_text_color String
  general_styles_primary_bgcolor   String
  general_styles_is_secondary_bgcolor Boolean
  general_styles_secondary_bgcolor String
  general_styles_soft_shadow       Boolean
  header_styles_profile_shadow     Float
  header_styles_profile_border_width Float
  header_styles_profile_border_color String
  header_styles_collapse_long_bio  Boolean
  header_styles_social_icons_size  Float
  card_styles_design               Int     // options [0, 1, 2, 3, 4]
  card_styles_card_color           String
  card_styles_text_color           String
  card_styles_card_corner          Int
  card_styles_card_border_width    Int
  card_styles_card_border_color    String
  card_styles_card_shadow          Int
  card_styles_card_spacing         Int
  title_font                       String
  text_font                        String
  social_enable_add_contacts       Boolean
  social_enable_share_btn          Boolean
  social_enable_search             Boolean
  social_enable_qr_code            Boolean
}

model Block {
  id            String  @id @default(uuid())
  text          String
  textColor     String  // Color value for the text
  corner        Int     // Corner value (e.g., rounded corners) max value is 28px
  
  linkId        String
  link          Link    @relation(fields: [linkId], references: [id]) // Linking Block to Link
}

model Social {
  id      String @id @default(uuid())
  icon    String
  url     String
  order   Int
 
  linkId  String
  link    Link   @relation(fields: [linkId], references: [id])
}
