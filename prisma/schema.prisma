generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(uuid())
  fullname              String                 @unique
  email                 String                 @unique
  password              String
  avatar                String                 @default("/images/user-placeholder.png")
  is_confirmed          Boolean                @default(false)
  resetToken            String?                @unique
  resetTokenExpires     DateTime?
  stripeCustomerId      String?                @unique
  role                  UserRole               @default(USER)
  activationCodes       ActivationCode[]
  links                 Link[]
  newsletterSubscribers NewsletterSubscriber[]
  passwordResetToken    PasswordResetToken?
  subscriptions         Subscription?
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String             @unique
  status            SubscriptionStatus @default(trialing)
  paymentMethod     PaymentMethod
  paymentScreenshot String?
  amount            Float
  expiresAt         DateTime?
  stripeSessionId   String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  coupons           Coupon[]
  user              User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ActivationCode {
  id        String   @id @default(uuid())
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id                                  String        @id @default(uuid())
  phone                               String
  website                             String
  instagram                           String
  twitter                             String
  displayname                         String
  bio                                 String
  userName                            String
  userId                              String
  last_feedback_ts                    DateTime      @default(now())
  general_styles_desktop_bgcolor      String
  general_styles_primary_text_color   String
  general_styles_primary_bgcolor      String
  general_styles_is_secondary_bgcolor Boolean
  general_styles_is_label_exist       Boolean
  general_styles_secondary_bgcolor    String
  general_styles_soft_shadow          Boolean
  general_styles_background_type      String              @default("solid")
  general_styles_gradient_color       String?
  general_styles_gradient_direction   Float?
  general_styles_gradient_offset      Float?
  general_styles_bg_image             String?
  general_styles_bg_image_blur       Boolean              @default(false)
  header_styles_profile_shadow        Float
  header_styles_profile_border_width  Float
  header_styles_profile_border_color  String
  header_styles_collapse_long_bio     Boolean
  header_styles_social_icons_size     Float
  card_styles_design                  Int
  card_styles_card_color              String
  card_styles_text_color              String
  card_styles_label_color             String
  card_styles_card_corner             Float
  card_styles_card_border_width       Float
  card_styles_card_border_color       String
  card_styles_card_shadow             Float
  card_styles_card_spacing            Float
  title_font                          String
  text_font                           String
  social_enable_add_contacts          Boolean
  social_enable_share_btn             Boolean
  social_enable_search                Boolean
  social_enable_qr_code               Boolean
  social_enable_hide_raabet_branding  Boolean       @default(false)
  social_custom_logo                  String        @default("")
  social_custom_logo_size             Float         @default(0)
  analytics                           Analytics[]
  blocks                              Block[]
  feedbacks                           Feedback[]
  user                                User          @relation(fields: [userId], references: [id])
  profileViews                        ProfileView[]
  qrcodes                             QRCode[]
  socials                             Social[]
}

model Feedback {
  id        String   @id @default(uuid())
  linkId    String
  rating    Int
  highlight String
  feedback  String
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id])
}

model QRCode {
  id          String   @id @default(uuid())
  type        QRType   // enum for URL or TEXT
  url         String   @unique // Only for URL type
  destination_url  String?   // Actual destination URL (can be updated)
  display_url String   @unique
  views       Int      @default(0)
  isMain      Boolean  @default(false)
  link        Link     @relation(fields: [linkId], references: [id])
  linkId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scans       QRScan[] @relation("QRCodeScans")
  
  // QR Code customization options
  qrSize          Int     @default(200)
  qrLevel         String  @default("M") // L, M, Q, H
  includeMargin   Boolean @default(true)
  foregroundColor String  @default("#000000")
  backgroundColor String  @default("#ffffff")
  qrShape         String  @default("square") // square, circle
  logoUrl         String? // Base64 encoded logo image
}

model Coupon {
  id             String        @id @default(uuid())
  code           String        @unique
  value          Float
  usedAt         DateTime?
  expiresAt      DateTime
  subscriptionId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  stripeId       String        @unique
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([code])
  @@index([stripeId])
  @@index([subscriptionId])
}

model Block {
  id                String      @id @default(uuid())
  style             Int         @default(0)
  type              BlockType
  title             String      @default("")
  description       String      @default("")
  text_align        String      @default("left")
  text_color        String      @default("")
  animation         String      @default("none")
  bg_image          String      @default("")
  custom_text_color String      @default("")
  url               String
  order             Int
  corner            Int         @default(0)
  layout            String      @default("0")
  views             Int         @default(0)
  linkId            String
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  analytics         Analytics[] @relation("BlockAnalytics")
  link              Link        @relation(fields: [linkId], references: [id])

  @@index([linkId])
}

model Social {
  id        String      @id @default(uuid())
  icon      String
  url       String
  order     Int
  label     String?
  linkId    String
  analytics Analytics[] @relation("SocialAnalytics")
  link      Link        @relation(fields: [linkId], references: [id])

  @@index([linkId])
}

model NewsletterSubscriber {
  id           String   @id @default(uuid())
  email        String   @unique
  subscribedAt DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@index([email])
}

model Analytics {
  id         String   @id @default(uuid())
  blockId    String?
  socialId   String?
  linkId     String
  created_at DateTime @default(now())
  block      Block?   @relation("BlockAnalytics", fields: [blockId], references: [id])
  link       Link     @relation(fields: [linkId], references: [id])
  social     Social?  @relation("SocialAnalytics", fields: [socialId], references: [id])

  @@index([blockId])
  @@index([socialId])
  @@index([created_at])
  @@index([linkId])
}

model ProfileView {
  id         String   @id @default(uuid())
  linkId     String
  created_at DateTime @default(now())
  link       Link     @relation(fields: [linkId], references: [id])

  @@index([linkId])
}

model QRScan {
  id         String   @id @default(uuid())
  qrCodeId   String
  created_at DateTime @default(now())
  qrCode     QRCode   @relation("QRCodeScans", fields: [qrCodeId], references: [id])

  @@index([qrCodeId])
  @@index([created_at])
}

model Blog {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  slug          String
  title         String
  excerpt       String
  content       String   @db.Text
  author        String
  publishedAt   DateTime
  updatedAt     DateTime @updatedAt
  featuredImage String?
  tags          String[] // Array of tags
  readTime      Int?     // Reading time in minutes
  locale        String   // 'ar' or 'en'
  viewCount     Int      @default(0)
  createdAt     DateTime @default(now())

  @@unique([slug, locale])
  @@index([slug])
  @@index([locale])
  @@index([publishedAt])
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentMethod {
  stripe
  manual
}

enum SubscriptionStatus {
  active
  pending
  failed
  canceled
  trialing
  none
}

enum BlockType {
  text
  url
  email
  file
  image
  separator
  audio
  video
}

enum QRType {
  url
  profile
}
