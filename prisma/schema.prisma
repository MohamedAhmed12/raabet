// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {  
  id                  String  @id @default(uuid())
  fullname            String  @unique
  email               String  @unique
  password            String
  avatar              String @default("/images/user-placeholder.png")
  links               Link[]
  is_confirmed        Boolean  @default(false)
  activationCodes     ActivationCode[] // One-to-many relationship
  passwordResetToken  PasswordResetToken?
  resetToken          String?  @unique
  resetTokenExpires   DateTime?
  stripeCustomerId    String?  @unique
  subscriptions  Subscription[]  // One-to-many relationship
  newsletterSubscribers NewsletterSubscriber[]    // One-to-many relationship with NewsletterSubscriber
}

enum PaymentMethod {
  stripe
  manual
}

enum SubscriptionStatus {
  active
  pending
  failed
  canceled
  trialing
  none
}

model Subscription {
  id                     String          @id @default(uuid())
  userId                 String          @unique
  status                 SubscriptionStatus @default(trialing)
  paymentMethod          PaymentMethod
  paymentScreenshot     String?         // For manual payments
  amount                Float
  expiresAt             DateTime?
  stripeSessionId       String?         @unique
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  user                  User            @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ActivationCode {
  id        String   @id @default(uuid())
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) // Add this line
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Allows multiple activation codes per user
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id             String  @id @default(uuid())
  phone        String
  website      String
  instagram    String
  twitter      String
  displayname  String
  bio          String

  // Relationships
  blocks                           Block[]    // One-to-many relationship with Block
  socials                          Social[]    // One-to-many relationship with social
  qrcodes                          QRCode[]    // One-to-many relationship with QRCode
  analytics                        Analytics[] // One-to-many relationship with Analytics
  profileViews                     ProfileView[] // One-to-many relationship with ProfileView
  userName     String
  userId       String
  user         User   @relation(fields: [userId], references: [id]) // Reference `id` in User
 
  // Feedback relationship
  feedbacks     Feedback[]
  last_feedback_ts DateTime?

  // Styling and design fields
  general_styles_desktop_bgcolor   String
  general_styles_primary_text_color String
  general_styles_primary_bgcolor   String
  general_styles_is_secondary_bgcolor Boolean
  general_styles_is_label_exist    Boolean
  general_styles_secondary_bgcolor String
  general_styles_soft_shadow       Boolean
  header_styles_profile_shadow     Float
  header_styles_profile_border_width Float
  header_styles_profile_border_color String
  header_styles_collapse_long_bio  Boolean
  header_styles_social_icons_size  Float
  card_styles_design               Int     // options [0, 1, 2, 3, 4]
  card_styles_card_color           String
  card_styles_text_color           String
  card_styles_label_color          String
  card_styles_card_corner          Float
  card_styles_card_border_width    Float
  card_styles_card_border_color    String
  card_styles_card_shadow          Float
  card_styles_card_spacing         Float
  title_font                       String
  text_font                        String
  social_enable_add_contacts       Boolean
  social_enable_share_btn          Boolean
  social_enable_search             Boolean
  social_enable_qr_code            Boolean
  social_enable_hide_raabet_branding Boolean @default(false)
  // social_enable_enable_verified_badge Boolean @default(false)
  social_custom_logo               String   @default("")
  social_custom_logo_size          Float   @default(0)
}

model Feedback {
  id        String   @id @default(uuid())
  link      Link     @relation(fields: [linkId], references: [id])
  linkId    String
  rating    Int      // 1 to 5
  highlight String   // 'feature', 'error', 'other'
  feedback  String
  createdAt DateTime @default(now())
}

// Define the enum
enum BlockType {
  text
  url
  email
  file
  image
  separator
  audio
  video
}

model QRCode {
  id          String   @id @default(uuid())
  type        QRType   // enum for URL or TEXT
  url         String   @unique // Only for URL type
  display_url String   @unique
  views       Int      @default(0)
  isMain      Boolean  @default(false)
  link        Link     @relation(fields: [linkId], references: [id])
  linkId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum QRType {
  url
  profile
}

model Block {
  id                     String      @id @default(uuid())
  style                  Int         @default(0)
  type                   BlockType
  title                  String      @default("")
  description            String      @default("")
  text_align             String      @default("left")
  text_color             String      @default("")
  animation              String      @default("none")
  bg_image               String      @default("")
  custom_text_color      String      @default("")             
  url                    String
  order                  Int
  corner                 Int         @default(0) // Corner value (e.g., rounded corners) max value is 28px
  layout                 String      @default("0") // it has to be string although it only have strings as value
  views                  Int      @default(0)
  analytics Analytics[] @relation("BlockAnalytics", fields: [], references: [])

  linkId                String
  link                  Link        @relation(fields: [linkId], references: [id])
  
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  
  @@index([linkId])
}

model Social {
  id        String      @id @default(uuid())
  icon      String
  url       String
  order     Int
  label     String?
  
  linkId    String
  link      Link        @relation(fields: [linkId], references: [id])
  
  analytics Analytics[] @relation("SocialAnalytics", fields: [], references: [])

  @@index([linkId])
}

model NewsletterSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  subscribedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([email])
}

model Analytics {
  id          String   @id @default(uuid())
  
  // Relations to Block or Social
  blockId     String?
  block       Block?   @relation("BlockAnalytics", fields: [blockId], references: [id])
  
  socialId    String?
  social      Social?  @relation("SocialAnalytics", fields: [socialId], references: [id])
  
  // Link reference
  linkId      String
  link        Link     @relation(fields: [linkId], references: [id])

  
  created_at  DateTime @default(now())

  // Indexes for better query performance
  @@index([blockId])
  @@index([socialId])
  @@index([created_at])
  @@index([linkId])
}

model ProfileView {
  id        String   @id @default(uuid())
  linkId    String
  link      Link     @relation(fields: [linkId], references: [id])

  created_at DateTime @default(now())

  @@index([linkId])
}